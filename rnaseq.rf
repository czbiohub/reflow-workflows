param (
    // S3 path to read1 of the fastq/fasta file. If multiple files, 
    // can be pipe-separated e.g. sample1_01.fastq|sample1_02.fastq
    read1 string

    // S3 path to read2 of the fastq/fasta file. If multiple files, 
    // can be pipe-separated e.g. sample1_01.fastq|sample1_02.fastq
    read2 string

    // Identifier of the sample
    name string

    // Full s3 folder location to copy alignment output and htseq 
    // results. Each sample is output to a folder.
    output string

    // Only mouse/vM19 is supported for now. Must be a subfolder in
    // the reference containing *.genome.fa and *.annotation.gtf files
    genome = "mouse/vM19"

    // If "west", use the us-west-2 bucket s3://czbiohub-reference
    //      for the reference genome,
    // if "east", use the us-east-1 bucket s3://czbiohub-reference-east
    //      for the reference genome
    region = "west"
)

val files = make("$/files")
val dirs = make("$/dirs")

// Local utility file
val utils = make("./utils.rf")

// Fastqc
val fastqc = make("./fastqc.rf")
val star = make("./star.rf")
val samtools = make("./samtools.rf")
val htseq = make("./htseq.rf")


reference_bucket := if region == "west" {
        "s3://czbiohub-reference/" } else {
        "s3://czbiohub-reference-east/"
    }


val Main = {
    output := utils.MaybeAddTrailingSlash(output)

    r1 := utils.SplitByPipe(read1)
    r2 := utils.SplitByPipe(read2)

    reads := ["R1": r1, "R2": r2]

    fastqc_results := [fastqc.FastQC(r, name + "_" + read_number) | (read_number, r) <- reads]

    reference_dir := dir(reference_bucket + genome)
    val (fasta_gz, _) = dirs.Pick(reference_dir, "*genome.fa.gz")
    val (gtf_gz, _) = dirs.Pick(reference_dir, "*annotation.gtf.gz")
    fasta := utils.ParallelUnzip(fasta_gz, 8)
    gtf := utils.ParallelUnzip(gtf_gz, 8)

    val index = star.Index(fasta, gtf)
    val alignment_dir = star.Align(r1, r2, index)
    
    val (aligned, _) = dirs.Pick(alignment_dir, "*Aligned.out.bam")
    val sorted = samtools.Sort(aligned)
    val index = samtools.Index(sorted)
    val byName = samtools.SortByName(sorted)
    val counts = htseq.Count(byName, gtf)

    count_dir := dirs.Make(["htseq-count.txt": counts])

    output_dirs := [alignment_dir, count_dir] + fastqc_results

    [dirs.Copy(d, output) | d <- output_dirs]
}
