val dirs = make("$/dirs")



//	# these are all the TM sequencing folders
//	S3_FOLDERS = ['170907_A00111_0051_BH2HWLDMXX',
//	              '170907_A00111_0052_AH2HTCDMXX',
//	              '170910_A00111_0053_BH2HGKDMXX',
//	              '170910_A00111_0054_AH2HGWDMXX',
//	              '170914_A00111_0057_BH3FY7DMXX',
//	              '170914_A00111_0058_AH3FYKDMXX',
//	              '170918_A00111_0059_BH3G22DMXX',
//	              '170918_A00111_0060_AH3FYVDMXX',
//	              '170921_A00111_0062_BH3FYHDMXX',
//	              '170921_A00111_0063_AH3G23DMXX',
//	              '170925_A00111_0066_AH3TKNDMXX',
//	              '170925_A00111_0067_BH3M5YDMXX',
//	              '170928_A00111_0068_AH3YKKDMXX',
//	              '170928_A00111_0069_BH52YMDMXX']

// param (
//	// sample is the name of the 1000genomes phase 3 sample
//	sample string
//
//	// out is the target of the output merged BAM file
//	out string
//)


val dirs = make("$/dirs")

val sourmash = "czbiohub/sourmash"

// All parameters are suggested from
// http://sourmash.readthedocs.io/en/latest/using-sourmash-a-guide.html#could-you-just-give-us-the-command-line


// Trims low-abundance reads using trim-low-abund.py from khmer
func Trim(r1, r2 file) = 
	exec(image := sourmash, mem := 4*GiB) (out dir) {"
		cd {{out}}
		trim-low-abund.py --cutoff 3 --trim-at-coverage 18 --variable-coverage --max-memory-usage 4e9 {{r1}} {{r2}}
	"}
// This is safe to use on genomes, metagenomes, and transcriptomes. 
// If you are working with large genomes or diverse metagenomes, you may need to increase the 
// -M parameter to use more memory.

// For high coverage genomic data, you can do very stringent trimming with an absolute cutoff, e.g.

// 			trim-low-abund.py -C 10 -M 2e9 <all of your input read files>
// will eliminate all k-mers that appear fewer than 10 times in your data set. This kind of trimming will 
// dramatically reduce your sensitivity when working with metagenomes and transcriptomes, however, 
// where there are always real low-abundance k-mers present.


// "Re-align" R1 and R2 reads as they haven't necessarily been kept in order
// func ExtractPaired(trim1, trim2, file) file =
//	exec(image := sourmash) {"
//		extract-paired-reads.py
//	"}


// Compute a minhash signature for a sample
func Compute(trimmed file) =
	exec(image := sourmash, mem := GiB) (sig file) {"
		sourmash compute --track-abundance {{trimmed}}
	"}

val Main = {
	// U-2 OS cell line
    r1 := file("s3://olgabot-seq2loc/fastq/rnaseq/SRR629563_pass_1.fastq.gz")
    r2 := file("s3://olgabot-seq2loc/fastq/rnaseq/SRR629563_pass_2.fastq.gz")

    val output = Trim(r1, r2)

    // trim-low-abund.py adds a new file in the same directory with the ending ".abundtrim"
    // Type is fastq (not fastq.gz) but don't need to specify for sourmash
    val (trimmed, trimmed_name) = dirs.Pick(output, "*abundtrim")
    // print(trimmed, trimmed_name)
    // val (trim1, _) = dirs.Pick(output, "SRR629563_pass_1.fastq.gz.abundtrim")
    // val (trim2, _) = dirs.Pick(output, "SRR629563_pass_1.fastq.gz.abundtrim")

	Compute(trimmed)
}
