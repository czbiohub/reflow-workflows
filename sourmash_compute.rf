param (
    // S3 path to read1 of the fastq/fasta file. If multiple files, 
    // can be pipe-separated e.g. sample1_01.fastq|sample1_02.fastq
    read1 string

    // S3 path to read2 of the fastq/fasta file. If multiple files, 
    // can be pipe-separated e.g. sample1_01.fastq|sample1_02.fastq
    read2 string

    // Identifier of the sample
    name string

    // Full s3 file location to put the sourmash signature
    output string

    // Size of kmer(s) to use. If calculating protein signatures, 
    // need to be divisible by 3
    // 21,31,51 are Sourmash defaults
    ksizes = "21,31,51"

    // If true, remove low abundance (probably erroneous) kmers before computing signature
    // Usually good practice
    trim_low_abundance_kmers = true

    // choose number of hashes as 1 in FRACTION of input k-mers
    scaled = 1000

    // Calculate protein signature
    protein = false

    // Calculate DNA signature
    dna = true

    // Gigabytes of memory for trimming. 4 is enough for most samples but should 
    // increase to 16 or 64 if (meta)genome/(meta)transcriptome is very complex
    trim_memory = 4

    // Whether or not to perform "digital normalization" aka remove 
    // high-coverage reads altogether while trimming
    diginorm = false

    // Maximum coverage for --diginorm
    diginorm_coverage = 20
)


val kmer_hashing = "czbiohub/kmer-hashing"
// val sourmash = "quay.io/biocontainers/sourmash:2.0.0a7--py27_0"

val khmer_trim = make("./khmer_trim.rf")

val protein_flag = if protein { "--protein" } else { "--no-protein" }
val dna_flag = if dna { "--dna" } else { "--no-dna" }


// Compute a minhash signature for a sample
func ComputeTrimmed(trimmed file, name, ksizes string) = 
    exec(image := kmer_hashing, cpu := 2, mem := 4*GiB) (signature file) {"
        /opt/conda/bin/sourmash compute \
            --track-abundance \
            {{protein_flag}} \
            {{dna_flag}} \
            --scaled {{scaled}} \
            --ksizes {{ksizes}} \
            --merge '{{name}}' \
            --output {{signature}} \
            {{trimmed}}
"}


// Instantiate the system modules "files" (system modules begin
// with $), assigning its instance to the "files" identifier. To
// view the documentation for this module, run "reflow doc
// $/files".
val files = make("$/files")

// Instantiate Go system module "strings"
val strings = make("$/strings")

// Instantiate local "utils" module
val utils = make("./utils.rf")

// Create a file for each element in the `read1s`, `read2s` string array
// Now `r1`, `r2` are arrays of files
val r1 = utils.SplitByPipe(read1)
val r2 = utils.SplitByPipe(read2)


trimmed := khmer_trim.Trim(r1, r2)

signature := ComputeTrimmed(trimmed, name, ksizes)

outputs = [".trimmed.fastq": trimmed, ".sig": signature]

val Main = files.Copy(signature, output)
