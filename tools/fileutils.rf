// Module with generic file utilities

val image = "ubuntu:16.04"
val cpu = 1
val mem = GiB

// Gzip gzips a file
//
// @param f File to be gzipped
// @return gzipped Gzipped version of the input file f
func Gzip(f file) =
	exec(image, cpu, mem) (gzipped file) {"
		gzip -c {{f}} > {{gzipped}}
	"}

// Gunzip gzips a file
//
// @param gz File to be unzipped
// @return f Unzipped file
func Gunzip(gz file) =
	exec(image, cpu, mem) (f file) {"
		gunzip -c {{gz}} > {{f}}
	"}


// UnTarGZ decompresses a tar.gz file
//
// @param tar_gz File to be unzipped
// @return f Unzipped file
func UnTarGz(tgz file) =
exec(image := image, mem := GiB, disk := 100*GiB) (unzipped dir) {"
		tar xzf --directory {{unzipped}} {{tgz}}
"}


// Echo creates a file with a given string
//
// @param towrite String to write to file
// @return output Newly created file
func Echo(towrite string) =
	exec(image, cpu, mem) (output file) {"
		printf "{{towrite}}" > {{output}}
	"}

// EmptyFile is a file of size 0.
val EmptyFile = file("/dev/null")

// Concat concatenates text files together using cat.
func Concat(files [file]) =
	if (len(files) == 1) {
		val [returnFile] = files
		returnFile
	} else {
		exec(image, cpu, mem) (output file) {"
			cat {{files}} > {{output}}
		"}
	}

// Header extracts the first line of the file into a new file
func Header(f file) =
	exec(image := image, cpu, mem) (result file) {"
		head -n1 {{f}} > {{result}}
	"}

// HeaderLess extracts all but the first line of the file into a new file
func HeaderLess(f file) =
	exec(image := image, cpu, mem) (result file) {"
		tail -n+2 {{f}} > {{result}}
	"}
